const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/_app/immutable/entry/app.LP429t1r.js",s+"/_app/immutable/nodes/0.K9Yrxtcw.js",s+"/_app/immutable/assets/0.LOdtNnZu.css",s+"/_app/immutable/nodes/1.qoI5VqyE.js",s+"/_app/immutable/nodes/2.8X28V92E.js",s+"/_app/immutable/nodes/3.zPtWmTJc.js",s+"/_app/immutable/assets/3.RhVhKyGf.css",s+"/_app/immutable/nodes/4.0dYPFZ1t.js",s+"/_app/immutable/assets/4.if7N-bgj.css",s+"/_app/immutable/nodes/5.Dqs92rf5.js",s+"/_app/immutable/assets/5.VJtVeyNM.css",s+"/_app/immutable/nodes/6.1B0wWZGY.js",s+"/_app/immutable/assets/6.ZiL8pQr4.css",s+"/_app/immutable/nodes/7.nFYrRjS-.js",s+"/_app/immutable/assets/7.5JnDk9fg.css",s+"/_app/immutable/nodes/8.K1YDB7_f.js",s+"/_app/immutable/assets/8.4iYUCuwW.css",s+"/_app/immutable/assets/BackgroundMask.I2JQNFH6.css",s+"/_app/immutable/chunks/BackgroundMask.svelte_svelte_type_style_lang.R7RAj3gS.js",s+"/_app/immutable/chunks/BackgroundPatternDecorative.IhqMJbHy.js",s+"/_app/immutable/chunks/Badge.YtY01Pao.js",s+"/_app/immutable/chunks/Button.FL_U5aXc.js",s+"/_app/immutable/assets/ButtonGroup.W9Y4us5z.css",s+"/_app/immutable/chunks/ButtonGroup.svelte_svelte_type_style_lang.SOLwJ6Wp.js",s+"/_app/immutable/chunks/FeaturedIcon.aEVgvjnT.js",s+"/_app/immutable/chunks/Icon.oZMLMHqV.js",s+"/_app/immutable/chunks/OverlayScrollbarsComponent.UuOGiHZF.js",s+"/_app/immutable/chunks/Tabs.Bpp4FDXM.js",s+"/_app/immutable/chunks/entry.8wDMig00.js",s+"/_app/immutable/chunks/i18n.PijsWhIZ.js",s+"/_app/immutable/chunks/index.UhkZy2tN.js",s+"/_app/immutable/chunks/messages.JlnbMnGg.js",s+"/_app/immutable/chunks/runtime._WdKkLCr.js",s+"/_app/immutable/chunks/scheduler.Hj4Qi98n.js",s+"/_app/immutable/chunks/stores.0o7Z3W11.js",s+"/_app/immutable/chunks/trophy.J85q5cNm.js",s+"/_app/immutable/entry/start.ZK4ABb-s.js"],l=[s+"/favicon.png"],o="1705960453539",c=`cache-${o}`,u=[...m,...l];self.addEventListener("install",a=>{async function n(){await(await caches.open(c)).addAll(u)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),p=await caches.open(c);if(u.includes(t.pathname)){const e=await p.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&p.put(a.request,e.clone()),e}catch(e){const i=await p.match(a.request);if(i)return i;throw e}}a.respondWith(n())});
