const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/_app/immutable/entry/app.cBLmO0tH.js",s+"/_app/immutable/nodes/0.trIheXrq.js",s+"/_app/immutable/assets/0.LOdtNnZu.css",s+"/_app/immutable/nodes/1.pgqRqB8V.js",s+"/_app/immutable/nodes/2.8X28V92E.js",s+"/_app/immutable/nodes/3.N9p2YkcM.js",s+"/_app/immutable/assets/3.RhVhKyGf.css",s+"/_app/immutable/nodes/4.99XJYmGC.js",s+"/_app/immutable/assets/4.if7N-bgj.css",s+"/_app/immutable/nodes/5.DM6-VFz4.js",s+"/_app/immutable/assets/5.VJtVeyNM.css",s+"/_app/immutable/nodes/6.1B0wWZGY.js",s+"/_app/immutable/assets/6.ZiL8pQr4.css",s+"/_app/immutable/nodes/7.uhvXhABs.js",s+"/_app/immutable/assets/7.5JnDk9fg.css",s+"/_app/immutable/nodes/8.dLoKLL6q.js",s+"/_app/immutable/assets/8.4iYUCuwW.css",s+"/_app/immutable/assets/BackgroundMask.I2JQNFH6.css",s+"/_app/immutable/chunks/BackgroundMask.svelte_svelte_type_style_lang.j6j5-4Xz.js",s+"/_app/immutable/chunks/BackgroundPatternDecorative.daMewbh-.js",s+"/_app/immutable/chunks/Badge.pZa3rZKU.js",s+"/_app/immutable/chunks/Button.sndXQ00s.js",s+"/_app/immutable/assets/ButtonGroup.W9Y4us5z.css",s+"/_app/immutable/chunks/ButtonGroup.svelte_svelte_type_style_lang.SOLwJ6Wp.js",s+"/_app/immutable/chunks/FeaturedIcon.GkCpzFNo.js",s+"/_app/immutable/chunks/Icon.oZMLMHqV.js",s+"/_app/immutable/chunks/OverlayScrollbarsComponent.UuOGiHZF.js",s+"/_app/immutable/chunks/Tabs._qcVFDKv.js",s+"/_app/immutable/chunks/entry.y-iIsHZA.js",s+"/_app/immutable/chunks/i18n._lellW_C.js",s+"/_app/immutable/chunks/index.UhkZy2tN.js",s+"/_app/immutable/chunks/messages.qmSQo3AB.js",s+"/_app/immutable/chunks/scheduler.Hj4Qi98n.js",s+"/_app/immutable/chunks/stores.Ji2PVZlp.js",s+"/_app/immutable/chunks/trophy.J85q5cNm.js",s+"/_app/immutable/entry/start.XeE-PtOf.js"],l=[s+"/.nojekyll",s+"/favicon.png"],o="1705960862990",c=`cache-${o}`,m=[...u,...l];self.addEventListener("install",e=>{async function n(){await(await caches.open(c)).addAll(m)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),p=await caches.open(c);if(m.includes(t.pathname)){const a=await p.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&p.put(e.request,a.clone()),a}catch(a){const i=await p.match(e.request);if(i)return i;throw a}}e.respondWith(n())});
